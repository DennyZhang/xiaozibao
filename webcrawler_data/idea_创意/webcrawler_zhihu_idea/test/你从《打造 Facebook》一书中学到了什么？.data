id: 807c44f8b4e0220347ce77cb4743c5a2

source: http://www.zhihu.com/question/20727694

summary: 

title: 

status: 

--text follows this line--
  你从《打造 Facebook》一书中学到了什么？
  
- Cat Chen ， Facebook Front End Engineer
  
  其实有很多事情，在 Facebook 内部看起来是非常合理的，但放到中国却只适合少数人学习。如果你所在的公司不是像 Facebook 那样只招一流人才的话，那很多做法看过了也就是满足了八卦的欲望而已，很难在现实中执行。 我曾经在百度工作过，我知道如果单纯以百度的工作经验来看，很多事情看起来很有趣但完全不能用来解决百度当中的实际问题。我也在 Yahoo 工作过，就算都是美国公司了，文化不一样，Facebook 的部分做法在 Yahoo 也是不可行的。 -- 下面是我在多看里面划线了的部分，我可以稍微解释一下： > 如果需要跨组协作的话，Facebook会尽可能地让两边直接对接的工程师来沟通，做不做、什么时候做、做到什么程度，让他们自己来定，除非涉及的工作量很大，大到会影响到整个组的进度，基本都是把这些工作的计划权和决定权往下“推”，而不是往上“揽”。 我的经理从来没有介入过我和其他组的合作。我跟其他组的人说，我觉得我们该做这个，他们觉得有道理，那就一起做了。如果公司稍微官僚话一点，这是违规行为——两个组的员工要协调工作分配，当然应该有他们上面评级的经理来做，你不能私下去占用别人组的员工时间。如果公司激励机制略微有点偏差，再加上员工私心厉害一些，别人首先的想法肯定是「这对我有什么好处？」但 Facebook 强调对员工公司整体上的价值，所以如果大家都觉得这是对公司有价值的事情，那就做吧。 > 总而言之，在技术讨论中，我是把应聘者当作同事，如果讨论之后留给我的感觉是我不想和他共事，那我就不会给他积极的评价。 我觉得 Facebook 的面试是给我感觉最好的面试，因为它让我这个一直不太懂做面试官的人学习到什么是正确的面试方式，那就是把候选人当同事然后跟他一起讨论。 > Facebook非常鼓励员工到他感兴趣但不熟悉的领域，这样可以给一个项目带来新鲜的视角。当然，这么做的前提是这些人是很聪明的、非常有学习能力的工程师。 这对于把人当做螺丝钉用的公司来说是不可行的。（我觉得不需要更多解释了。） > 一个简单的原则是：至少要在相关代码里花半小时而没有任何头绪，这时候才适合去寻找导师或者问相关的工程师。这样你在向导师或者相关工程师请教的时候，可以在解释完遇到的问题之后，迅速描述你已经查看的代码和已经排除的一些假设。当别人知道你做过功课的时候，会更加愿意帮助你。不懂就问，而不是自己先钻研的人，在Facebook不受欢迎。 这是对所有学生、学徒都适用的建议。你不应该遇到不懂的问题就立即求助，但也不应该害怕求助。在一流人才聚集的地方，这比较容易做到。如果一家公司已经开始招二流三流人才，他们一求助原本的一流人才就崩溃。 > 在Facebook，产品工程师跟产品经理影响力的比重可能是60∶40，而后台系统方面，由于产品经理绝大多数情况下不需要参与，除非是直接关系到前台系统，两者影响力的比重几乎到达100∶0。 在美国，市场是（科技）创新主导的；在中国，市场是渠道主导的。 > 这些工具的基本理念就是，凡是被很多人不断重复的好习惯，要将其自动化，绑定到工具之中。以“Don't Make Me Think”（别让我多想）的方式来推广好习惯。 我曾经听到过关于流程最佳实践的解释，跟这个有点类似：最理想的状态下，一路点 Next 下去的做法是最符合流程的，而想要不符合流程则需要做很多改动，甚至要 hack 一下。在中国，因为人实在是便宜，所以很多时候不值得优化工具，只需要告诉使用的人在操作时多点两下以符合流程，但人必然是有惰性的，很快就会想要偷懒少点两下，结果就违反流程了。 > 在这个工具中，工程师和产品经理（也可以授权给其他非研发人员）可以设计新产品发布的目标人群特点（比如对年龄、性别、地域、受教育程度等方面的限制）及发布的人群比例（在0%～100%之间自由调整），所有的改变都不需要修改代码，只需要在工具页面上点击鼠标即可，让灰度发布变得很轻松。 这种 A/B 测试的工具在美国的大公司很常见，但在中国公司很少有，不知道为什么。可能因为中国公司没有「用数据说话」的传统，所以不需要很好的实验工具？在有这种工具的公司里，到底设计 A 好还是设计 B 好是不用争论的，如果说设计 B 比设计 A 更好看但有可能在运行时出错率高一些，那就都开个 1% 看看效果，然后再决定怎么调整。 > 你要在公司里推广一些规范性的规则，一种传统的方法是反复强调，另一种是开发出好用的工具，把这些东西固定化在里面，借助工具进行强制性推广，就能解决很多问题。 这个前面说过了…… > 作为一个程序员，非常有必要挑战一些自己不懂，但对于扩展知识库、能力库非常有帮助的项目，不要老想着待在自己感觉舒服的领域，不敢去碰陌生的领域，其实你完全可以突破一下，让自己的能力获得提升。 如果放在百度这是绝对不能做的事情——一个做前端的人如果想碰一下后端的代码，马上会有后端的人来阻止你，生怕你搞坏原本能正常工作的东西。要能做这样的事情，有几个条件必须满足：1. 公司要有完善的 code review 机制，你可以去做你不熟悉的事情，但那个领域的专家可以来 review 你做的结果，然后给你提建议，最坏的情况下就丢弃重做；2. 技术专家要有开放的心态，允许不熟悉的人来做自己很熟悉的事情，容忍他们犯错误，并且花自己的时间去指导他们，而不是觉得「你折腾一天还不如我两小时做完的效果好」；3. 公司要对这种做法表示认可和鼓励，技术专家花时间在指导别人上面，公司认为这也算作创造价值。 > 这就对人的要求比较高了，也是Facebook要招最好的工程师的原因之一。工程师不仅要善于写程序，也要有选择想法的能力，你要对这个问题有很深入的思考，进行大量的分析，还要有胆量，才能果断押注，并且有很高的命中率。 感觉这是中国学生的弱项。中国学生都是解决问题的能力远大于定义问题的能力，但缺乏提出好问题的能力就意味着你永远只能跟着一个会提好问题的人跑。会提问题不仅仅是发散地提一大堆不相关的问题，还要能收敛到对现状最有影响力的问题上。 > Facebook从不期望由一个人去完成某个项目所有的事情。我会要求某个组员来承担某个项目的责任，但要的是让他驱动整个项目，并不代表所有的事情都完全靠他个人去做。我会要求他善于使用整个公司的力量，学会积极主动地获得别人的帮助，事半功倍地完成一个项目，同时在这个过程中获得成长。 这也是前面所说的，对于「我帮助你有好处吗」这个问题，在很多公司内部答案是「没好处」，距离越远的两个人越明显。在 Facebook，这个问题的答案由「这件事对公司有价值吗」来决定。只要你能够提出正确的问题，你解决问题的方向大致正确，就能说服别人加入。 > Facebook对升职的理念是，在过去一段时间内，你的表现跟目标职位的平均水平相比毫不逊色，而且你要在那个职位上实际运作一段时间后，再正式给予升职。 如果公司有足够优秀的人才储备，其实你不着急提拔谁，我觉得道理就跟 hire slow 相似。
  
  池建强 ， 北京瑞友科技IT应用研究院副院长，编程爱…
  
  很久不在知乎回答问题了，这是一个邀请回答，正好读了这本书，就写点东西。 昨天读了《打造Facebook》，作者在自序中写道，在Facebook工作了3年以后，“我终于通过考验，从技术线转到了管理线，成为第一位中国籍研发经理。从技术到管理，要在管理代码之外，学会管理团队”。 这句话有意思的地方在最后一句，从技术到管理，并不是扔掉技术开始管理，而是在管理代码之外，还要去管理团队。 我知道很多人学习技术编写程序的最终目标就是成为一个不用写代码的人。他们以为成为管理者就可以对别人指手画脚，可以把所有的任务分派出去，可以组织毫无效率的会议......如果你是在一个臃肿的大公司，好吧，恭喜你还可以继续“管理”下去。如果你是在一个有活力的小团队，这种团队的管理者需要与团队共进退，上马可杀敌下马可治国，当一个问题无法解决所有眼睛都在看着你的时候，你需要拿出勇气和耐力，抽丝剥茧的把问题解决，而不是不负责任的扔给别人。 在国内软件企业，管理这个词似乎已经变成了浮躁的代名词，当你身边出现这样的管理者或者你正在变成这样一个管理者的时候，就要小心了。 其实这本书的作者还说了另一句话，扎克伯格每年会给自己一个挑战，2010年学中文，2011年只吃自己屠宰的动物，2012年呢？坚持每天写代码！ 另外，从员工的角度来看，扎克伯格并不像老板，而是个“天才”的年轻人。这话说的一点错没有。 美国在科技领域似乎盛产少年英雄。苹果的乔布斯、沃兹，微软的盖茨、艾伦，谷歌的佩奇和布林，还有现在风头正劲的扎克伯格。这些少年天才基本上在20岁到30岁之间已经达到了常人无法企及的高度，为一生的事业打造了坚实的基础。 小时候读武侠小说的时候，看到那些少年英雄，常常会产生一种代入感，幻想自己也会遭遇某种奇遇。读得入迷的时候，遇到悬崖都会犹豫，跳下去是不是有本武林秘笈在等着？长大以后也是一样，当年微软横行天下的时候，多少程序员梦着醒着都在想，没准哪一天我也会称为中国的比尔盖茨吧...... 打住，没那么多没准！这个世界上真正的天才不足1/1000，能成事的天才更是凤毛麟角。如果你不是天才，要尽早认识到这一点，越早越好。小时候总有人问，长大后的理想是什么？科学家、画家、作家、这个家那个家，长大以后会发现，这世界没那么多家，大部分人想取得一定的成就，或者想成为什么样的人，必须通过长期艰苦的练习和有意识的提升，才能达到。当然，有时候我们还需要一点运气！ 这本书对Facebook的新兵训练营、内部工具的开发、Hack-A-Mouth都有很详细的描述，都是非常不错的经验，可惜目前在国内的团队实现还是有一定难度的，权当做借鉴吧，有参考总比没有好。
  
  薛亦晨 ， 点心OS/软件工程师
  
  1: facebook对于hack day 的支持，以及公司的黑客文化。其中那个即使可以推迟发布也支持员工参加的八卦，让我印象深刻。国内同行缺乏的一种激发工作激情的活动，最近有好转，豌豆荚，有道都搞过，但是规模都不是很大 2：招聘，这个是我疑惑点最多的地方。facebook如何做到招到最优秀的人，如何保持这些人的合作以及不离开，如何将这些人组合起来，发挥到1+1>3的状态？ 3：新人训练营，告诉员工一些代码风格，一切从代码说起。这个很重要，不然进来一味的求快，不告诉其规范和让其整体的掌握代码，会导致其维护和新加的功能致使整个项目无法维护 4：工具文化，内部好的工具可以提高员工工作的效率。看完之后，在工作中研究各种利于工作的工具，发现对于项目管理遗漏的一个很好的工具：jira 5：不重复的制造轮子。这个对于提高整个公司效率很重要，也很难做到，因为程序员本身就很自负，对于某个功能还是倾向于自己去做一套。 6：我们是为facebook这家公司服务的而不是为某个部门工作的。但是如何提高员工这方面的意识，还是没有找到答案 其实学到的最重要的是那种字里行间透出来的激情，以及对于改变世界，使得更多人生活受益的那种渴望。 看完后，有种很想做事，很想在那样一种团队里面工作的冲动。
  
  林海 ， 互联网就是未来。
  
  蟹妖。 比较尴尬的是我没有读过这本书，只能是先去看看豆瓣的评论了。我的第一感觉是，目前，关于苹果和谷歌的书籍已经大量出版，而市场上仍然缺乏对fecebook的深度研究的书。作者作为前facebook员工从自己的内部观察去写facebook，比局外人的作品要有参考价值。 其次，我记得有一个朋友最近也在写书。他在自序中说，以往的职场小说多数是由人事或市场部门的职业经理人写的，而他是作为公司的总经理去写职场，对公司有一种不同寻常的全局观。王淮在写《打造 Facebook》一书时很有诚意，但是读者不仅仅要从王淮个人的视角去看facebook，更重要的是想更全面地了解facebook。这一点王淮可能不如一些职业作者，经过对公司员工进行大量访谈后开始写作。也不象前面提到的公司高层去写一部作品有其俯瞰的视角。 第三，这本书的真正价值在于让创业者去了解独特的facebook的管理文化。我现在认为，创业者应该是特种兵，而不是普通士兵。facebook在短短几年年崛起，其中一点是极客文化+工程师文化+大数据分析。在人力资源管理上，尽量选择优秀人才。最近我在业余时间研究创业管理，看过《精益创业》，《源创新》等书以及一些案例，但总觉得缺乏一些细节的了解。《打造 Facebook》一书的优点在于了解创业中的细节，以及通过细节去了解一个公司的整体。所以我在卓越上下了订单。我还认为，以后出版市场上要更多的内部员工来写书。而且最好是电子书，不要一下子就写完。 PS: 我还订了一本 孩子王:我眼里的扎克伯格及其Facebook王国
  
  倪海宇 ， 手机游戏，求游戏制作人、研发工程师！~
  
  1. 扎克伯格2012年的挑战是每天写代码，真不知道写的代码是否有用； 2. 素质高的人只和高素质的人在一起工作，素质的高的人士沟通成本很低； 3. 羡慕硅谷的人文环境； 4. 一些沟通技巧； 5. 一些招聘、团队管理技巧； 6. 一些common sense 总之，这种书最大的价值在于作者觉得没有价值的琐碎细节和事实，最没价值的就是作者的意见、感想和总结。 总的而言，比开复老师推荐的其他口水书可看性高多了，可能是因为周鸿祎也推荐了吧，事实证明老周还是比较看重自己的羽毛的，哈哈。 =============续一下============== 这种时髦书的收获主要几种： 1. 哦，原来这些事情的来源是这样的，可以满足读者历史八卦需求。 2. 哦，好牛逼啊，这些做法我们也可以参考一下，可以满足读者对比学习需求，技巧参考书； 3. 嗯，如果我遇到这样的机会会怎么处理，可以满足读者反推思维需求，； 我是一个晚上看完的，总的而言，有时间的话，书也不贵，值得一翻，特别是对于没去过硅谷、没去过外企的同学来说，膜拜一下吧。
  
  chercher ， 读完
  
  作为一个工作近四年，待过两家互联网公司的人，阅读这本书的过程中我一直反思这几年的经历种种。公司文化，个人成长，好的领导与不好的领导，流程，工具，产品设计，KPI等等。 公司文化：以前觉得虚无缥缈的东西，其实却是种无形的力量，指引着员工的心态，做事方式，决定着公司在一些事情或方向上有意见分歧时，如何决断。 个人成长：重复工作最容易磨灭人的激情，怎样找到挑战，突破自我是个问题。 好的领导与不好的领导：好的领导很稀少。遇见了要珍惜。 流程，工具，产品设计：把这三个列在一起，是因为见过太多不好用的流程与工具，大家总是说要把产品做到极致，自己用的流程和工具却总是那么糟糕。如果把做产品的极致精神也分一点到流程和工具上就好了。 KPI：见过一些为了KPI而重复造轮子，为了KPI拼命上项目，项目上完了之后就不管不顾了。根源上还是公司文化和管理的问题。
  
  韩亮 ， 酒瓶网 http://www. vinbottle.com
  
  主动是进步与发展的源泉。
  
  CLAN ， 程序员，Linux 开发，系统管理，Gentoo
  
  招聘很重要，尽量和志同道合，水平相当或能互补的人共事
  
  Kuan Huang ， Generation Z --- live and breathe in t…
  
  Find the best people you can and the rest will follow. To find the best people, you, as a CEO, have to be the best of the best. It's as simple as that.
  
  林恩泽 ， 关注互联网 /java开发
  
  1.极其关注用户体验，文中提到扎克伯格对网页上的按钮之间要相隔几个像素都仔细指出来。 2. 非常好的企业文化（黑客文化），是技术驱动的公司，工程师是有地位的，让工程师更有动力去发挥自己的智慧。 3. 有一致的价值观，都是为facebook工作，所以不同团队部门之间可以很好地相互合作。 4. 团队之间很好地沟通，上级会利用闲暇时间例如中午跟下属一起吃饭面对面进行沟通。 5. 整个团队都极其有热情跟创造力，大家都渴望进步（文中可以看到部分员工可以进行申请换岗到自己陌生的领域进行工作）。
  
  程浩翔 ， 玩家，魔幻科幻高科技，乐衷于心理学，迷…
  
  下午在书店大约的翻阅了一下这本书 就看到了知乎推荐精选对此书的探讨了 挺不错。 个人感觉也是看的最仔细的就是Facebook对于黑客文化的推崇和发展，这种带有Geek & Hack氛围的工作环境我觉得是导致成功的基础根本所在，学习能力和创造力以及思维的延伸拓展都是很多人很多公司所缺失的，复制只能复制出一个个空洞无灵魂的山寨作品，创新才是灵魂。
  
  成江东 ， DBA@si na
  
  http://www. iamcjd.com/? p=1280
  
  BonderWu ， Android Multimedia geek
  
  这几天正好在地铁上读。感觉写的东西过于随意，零零散散的。不过不可否认，这本书使我对Facebook有了更深的了解！
  
  yaoyunlong ， IT
  
  沟通技巧、管理。和那份值得人尊敬的精神。
  